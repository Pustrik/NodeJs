{"version":3,"file":"task2.js","sourceRoot":"","sources":["task2.ts"],"names":[],"mappings":";;AAAA,IAAI,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC5C,SAAS,QAAQ,CAAC,KAAY;IAC1B,IAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG;QACjD,OAAO,KAAK,CAAC;IACjB,OAAO,IAAI,CAAC;AAChB,CAAC;AACD,SAAS,IAAI,CAAC,UAAiB,EAAE,WAAkB,EAAE,UAAiB,EAAE,GAAU;IAC9E,IAAI,KAAK,EAAE,MAAM,EAAE,KAAa,CAAC;IACjrF,OAAO,IAAI,CAAC;;QACX,OAAO,KAAK,CAAC;AACtB,CAAC;AAKD,IAAI,UAAU,GAAU;IACpB,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;IACxC,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;CAC3C,CAAC;AACF,IAAI,WAAW,GAAU;IACrB,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;IACxC,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;CAC3C,CAAC;AACF,IAAI,UAAU,GAAU;IACpB,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;IACxC,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;CAC3C,CAAC;AACF,IAAI,GAAG,GAAU;IACb,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;IACxC,CAAC,EAAE,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC;CAC3C,CAAA;AACD,IAAG,QAAQ,CAAC,UAAU,CAAC,IAAI,QAAQ,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC,UAAU,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;IACvF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;CAC/D;;IACG,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC","sourcesContent":["let readlineSync = require('readline-sync');\nfunction checkVal(point: Point): boolean{\n    if(Math.abs(point.x) > 100 || Math.abs(point.y) > 100)\n        return false;\n    return true;\n}\nfunction isIn(firstAngle: Point, secondAngle: Point, thirdAngle: Point, dot: Point): boolean {\n    let first, second, third: number;\n    first = (firstAngle.x-dot.x)*(secondAngle.y-firstAngle.y)-(secondAngle.x-firstAngle.x)*(firstAngle.y-dot.y);\n    second = (secondAngle.x-dot.x)*(thirdAngle.y-secondAngle.y)-(thirdAngle.x-secondAngle.x)*(secondAngle.y-dot.y);\n    third = (thirdAngle.x-dot.x)*(firstAngle.y-thirdAngle.y)-(firstAngle.x-thirdAngle.x)*(thirdAngle.y-dot.y);\n    if((first >= 0 && second >= 0 && third >= 0) || (first <= 0 && second <= 0 && third <= 0))\n        return true;\n    else return false;\n}\ninterface Point {\n    x: number;\n    y: number;\n}\nlet firstAngle: Point = {\n    x: readlineSync.question(\"Введите x1: \"),\n    y: readlineSync.question(\"Введите y1: \")\n};\nlet secondAngle: Point = {\n    x: readlineSync.question(\"Введите x2: \"),\n    y: readlineSync.question(\"Введите y2: \")\n};\nlet thirdAngle: Point = {\n    x: readlineSync.question(\"Введите x3: \"),\n    y: readlineSync.question(\"Введите y3: \")\n};\nlet dot: Point = {\n    x: readlineSync.question(\"Введите x0: \"),\n    y: readlineSync.question(\"Введите y0: \")\n}\nif(checkVal(firstAngle) || checkVal(secondAngle) || checkVal(thirdAngle) || checkVal(dot)) {\n    console.log(isIn(firstAngle, secondAngle, thirdAngle, dot));\n} else\n    console.log(\"Не верные значения координат\");\n"]}